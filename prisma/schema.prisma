generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int            @id @default(autoincrement())
  name       String
  email      String         @unique
  role       Role           @default(USER)
  password   String
  createdAt  DateTime       @default(now())
  updateAt   DateTime       @updatedAt
  isActive   Boolean        @default(true)

  referrals     Referral[]     @relation("UserReferrals")
  referradBy    Referral[]     @relation("Referrer")

  orders        Orders[]
  payments      Payments[]
  products      Tariff[]       @relation("CreatedProducts")
  balances      UserBalance[]
  createdProducts Product[]    @relation("CreatedMainProducts")

  @@map("users")
}

model UserBalance {
  id        Int     @id @default(autoincrement())
  userId    Int
  currency  String
  amount    Float   @default(0)

  user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, currency])
}

model Referral {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique()
  referal_user_id Int?    @default(1)
  referals        Json?

  user        Users  @relation("UserReferrals", fields: [user_id], references: [id], onDelete: Cascade)
  referrendBy Users? @relation("Referrer", fields: [referal_user_id], references: [id], onDelete: SetNull)

  @@map("referal")
}

model Tariff {
  id             Int                  @id @default(autoincrement())
  term           Int
  referral_bonus Int
  createdAt      DateTime             @default(now())
  created_user   Int
  photo_url      String

  creator      Users                @relation("CreatedProducts", fields: [created_user], references: [id], onDelete: Cascade)
  orders       Orders[]             
  translations ProductTranslation[] @relation("TariffTranslations")
  prices       ProductPrice[]       @relation("TariffPrices")

  @@map("products")
}

model ProductTranslation {
  id         Int       @id @default(autoincrement())
  tariff_id  Int?
  product_id Int?
  language   String?
  name      String?
  description       String?
  longDescription String?
  features String?
  usage String?



  tariff     Tariff?    @relation("TariffTranslations", fields: [tariff_id], references: [id], onDelete: Cascade)
  product    Product?   @relation("ProductTranslations", fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, language])
  @@unique([product_id, language])
  @@map("product_translations")
}

model ProductPrice {
  id         Int       @id @default(autoincrement())
  tariff_id  Int?
  product_id Int?
  currency   String
  value      Float

  tariff     Tariff?   @relation("TariffPrices", fields: [tariff_id], references: [id], onDelete: Cascade)
  product    Product?  @relation("ProductPrices", fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, currency])
  @@unique([product_id, currency])
  @@map("product_prices")
}

model Orders {
  id         Int       @id @default(autoincrement())
  user_id    Int
  tariff_id  Int
  isChecked  Boolean   @default(false)
  orderedAt  DateTime  @default(now())
  checkedAt  DateTime?

  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tariff   Tariff  @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Payments {
  id              Int          @id @default(autoincrement())
  user_id         Int
  status          PaymentStatus @default(PENDING)
  photo_url       String?      @unique
  to_send_date    DateTime     @default(now())
  to_checked_date DateTime?
  currency        String

  user     Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Card {
  id                 Int     @id @default(autoincrement())
  card_seria_number  String  @unique
  countries          String
  card_type          String?

  @@map("cards")
}

model Product {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  created_user  Int
  photo_url     ProductImage[]
  rating       Int
  rewiev       Int

  creator       Users                @relation("CreatedMainProducts", fields: [created_user], references: [id], onDelete: Cascade)
  translations  ProductTranslation[] @relation("ProductTranslations")
  prices        ProductPrice[]       @relation("ProductPrices")

  @@map("main_products")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  CANCELLED
  SUCCESS
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  photo_url  String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}
