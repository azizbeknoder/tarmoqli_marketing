generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int            @id @default(autoincrement())
  name       String
  email      String         @unique
  role       Role           @default(USER)
  password   String?
  createdAt  DateTime       @default(now())
  updateAt   DateTime       @updatedAt
  isActive   Boolean        @default(true)
  coin      Int @default(0)
  googleId   String? @unique

  referrals     Referral[]     @relation("UserReferrals")
  // referradBy    Referral[]     @relation("Referals")
  

  orders        Orders[]
  ordersProduct OrdersProduct[]
  payments      Payments[]

  createdProducts Product[]    @relation("CreatedMainProducts")
  userTariff      UserTarif[]
  takeOff         TakeOff[]

  @@map("users")
}



model Referral {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique()
  referal_user_id Int  
  date      DateTime @default(now())
  // referals        Int 

  // referalss   Users @relation("Referals",fields: [referals],references: [id],onDelete: Cascade)
  user        Users  @relation("UserReferrals", fields: [user_id], references: [id], onDelete: Cascade)
  // referrendBy Users? @relation("Referrer", fields: [referal_user_id], references: [id], onDelete: SetNull)

  @@map("referal")
}

model Tariff {
  id             Int               @id @default(autoincrement())
  term           Int
  referral_bonus Int
  dailyProfit    Int             @default(0) // kunlik foyda
  createdAt      DateTime          @default(now())
  photo_url      String
  coin   Int
  
  userTariff UserTarif[]
  orders         Orders[]             
  translations   TariffTranslation[]
  // prices         TariffPrice[]

  @@map("products")
}


model ProductTranslation {
  id         Int       @id @default(autoincrement())
  tariff_id  Int?
  product_id Int?
  language   String?
  name      String?
  description       String?
  longDescription String?
  features String?
  usage String?



  
  product    Product?   @relation("ProductTranslations", fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, language])
  @@unique([product_id, language])
  @@map("product_translations")
}

// model ProductPrice {
//   id         Int       @id @default(autoincrement())
//   tariff_id  Int?
//   product_id Int?
//   currency   String
//   value      Float
//   product    Product?  @relation("ProductPrices", fields: [product_id], references: [id], onDelete: Cascade)

//   @@unique([tariff_id, currency])
//   @@unique([product_id, currency])
//   @@map("product_prices")
// }

model Orders {
  id         Int       @id @default(autoincrement())
  user_id    Int
  tariff_id  Int
  isChecked  PaymentStatus @default(PENDING)
  orderedAt  DateTime  @default(now())
  checkedAt  DateTime?
  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tariff   Tariff  @relation(fields: [tariff_id], references: [id], onDelete: Cascade)
  comment   String?

  @@map("orders")
}
model OrdersProduct {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id  Int
  isChecked  PaymentStatus @default(PENDING)
  // product_jd Int
  comment     String?
  contactNumber    String?
  contactLink       String?
  orderedAt  DateTime  @default(now())
  checkedAt  DateTime?

  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  main_products   Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  

  @@map("orderProduct")
}

model Payments {
  id              Int          @id @default(autoincrement())
  user_id         Int
  status          PaymentStatus @default(PENDING)
  photo_url       String?      @unique
  to_send_date    DateTime     @default(now())
  to_checked_date DateTime?
  card            String?
  coin            Int?
  reason          String?
  

  user     Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Card {
  id                 Int     @id @default(autoincrement())
  card_seria_number  String  @unique
  countries          String
  card_type          String?

  @@map("cards")
}

model Product {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  created_user  Int
  count         Int?
  photo_url     ProductImage[]
  rating       Int
  rewiev       Int
  coin      Int

  creator       Users                @relation("CreatedMainProducts", fields: [created_user], references: [id], onDelete: Cascade)
  translations  ProductTranslation[] @relation("ProductTranslations")
  // prices        ProductPrice[]       @relation("ProductPrices")
  orders        OrdersProduct[]
  @@map("main_products")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  CANCELLED
  SUCCESS
  SENDING
  SCRINSHOTUPLOAD
  CANCELLEDADMIN
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  photo_url  String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}


// model StatsWidget {
//   id            String         @id @default(uuid())
//   onlineUserCount Int
//   totalEarned    Decimal
//   statEarnings   StatEarning[]
//   recentUsers    RecentUser[]
// }

// model StatEarning {
//   id         String       @id @default(uuid())
//   currency   String       // Masalan: 'USD', 'UZS'
//   amount     Decimal
//   widget     StatsWidget?  @relation(fields: [widgetId], references: [id],onDelete: Cascade)
//   widgetId   String?
// }

// model RecentUser {
//   id           String       @id @default(uuid())
//   email        String?
//   widget       StatsWidget? @relation(fields: [widgetId], references: [id],onDelete: Cascade)
//   widgetId     String?
//   userEarnings UserEarning[]
// }

// model UserEarning {
//   id           String       @id @default(uuid())
//   currency     String
//   amount       Decimal
//   recentUser   RecentUser   @relation(fields: [recentUserId], references: [id],onDelete: Cascade)
//   recentUserId String
// }


model TariffTranslation {
  id          Int      @id @default(autoincrement())
  tariff_id   Int
  language    String
  name        String
  description String?
  longDescription String?
  features    String?
  usage       String?

  tariff      Tariff   @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, language])
}

// model TariffPrice {
//   id        Int     @id @default(autoincrement())
//   tariff_id Int
//   currency  String
//   value     Float

//   tariff    Tariff  @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

//   @@unique([tariff_id, currency])
// }

model Coin{
  id Int @id @default(autoincrement())
  currency String
  count Float
  @@unique([currency])
}

model UserTarif{
  id Int @id @default(autoincrement())
  user_id Int
  tariff_id Int
  start_time DateTime @default(now())
  status  Boolean @default(true)
  end_time DateTime?
  lastBonusDate DateTime?
  user Users @relation(fields: [user_id],references: [id],onDelete: Cascade)
  tariff Tariff @relation(fields: [tariff_id],references: [id],onDelete: Cascade)
}
model SpinValue{
  id Int @id @default(autoincrement())
  name String?
  color String?
  precent Int?
}
model BonusDetailes{
  id Int @id @default(autoincrement())
}

model ReferalLevel{
  id Int @id @default(autoincrement())
  level Int
  prize String
  count Int
}

model RecentUser{
  id Int @id @default(autoincrement())
  email String  @unique
  coin Int
}

model StatistikaWeb{
  id Int @id @default(autoincrement())
  userCount Int
  allCoin Int
}
model TakeOff{
  id Int @id @default(autoincrement())
  userId Int
  cardNumber String
  how_much   Int
  status TakeOffStatus @default(PENDING)
  requestDate  DateTime @default(now())
  checkedDate DateTime?
  commend  String?
  fullName String?


    user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}
model ReferalBonus{
  id Int @id @default(autoincrement())
  user_id Int
  endTime DateTime
}

enum TakeOffStatus {
  PENDING
  CANCELLED
  SUCCESS
  SENDING
  SCRINSHOTUPLOAD
  CANCELLEDADMIN
}

