generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int            @id @default(autoincrement())
  name       String
  email      String         @unique
  role       Role           @default(USER)
  password   String?
  createdAt  DateTime       @default(now())
  updateAt   DateTime       @updatedAt
  isActive   Boolean        @default(true)
  coin      Float @default(0)
  googleId   String? @unique
  referalCoin Float @default(0)


  referrals     Referral[]     @relation("UserReferrals")
  // referradBy    Referral[]     @relation("Referals")
  

  orders        Orders[]
  ordersProduct OrdersProduct[]
  payments      Payments[]

  createdProducts Product[]    @relation("CreatedMainProducts")
  userTariff      UserTarif[]
  takeOff         TakeOff[]
  incomeHistroy   IncomeHistory[] 
  bonusReferalUserId    BonusReferalHistory[] @relation("userId")
  bonusReferalId  BonusReferalHistory[] @relation("referalUserId")

  @@map("users")
}





model Referral {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique()
  referal_user_id Int  
  date      DateTime @default(now())
  // referals        Int 

  // referalss   Users @relation("Referals",fields: [referals],references: [id],onDelete: Cascade)
  user        Users  @relation("UserReferrals", fields: [user_id], references: [id], onDelete: Cascade)
  // referrendBy Users? @relation("Referrer", fields: [referal_user_id], references: [id], onDelete: SetNull)

  @@map("referal")
}

model Tariff {
  id             Int               @id @default(autoincrement())
  term           Float
  referral_bonus Float
  dailyProfit    Float             @default(0) // kunlik foyda
  createdAt      DateTime          @default(now())
  photo_url      String
  coin   Float
  rating Int?
  
  userTariff UserTarif[]
  orders         Orders[]             
  translations   TariffTranslation[]
  imcomeHistory  IncomeHistory[]
  // prices         TariffPrice[]

  @@map("products")
}
model TariffTranslation {
  id          Int      @id @default(autoincrement())
  tariff_id   Int
  language    String
  name        String
  description String?
  longDescription String?
  features    String?
  usage       String?

  tariff      Tariff   @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, language])
}

model ProductTranslation {
  id         Int       @id @default(autoincrement())
  tariff_id  Int?
  product_id Int?
  language   String?
  name      String?
  description       String?
  longDescription String?
  features String?
  usage String?



  
  product    Product?   @relation("ProductTranslations", fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([tariff_id, language])
  @@unique([product_id, language])
  @@map("product_translations")
}



model Orders {
  id         Int       @id @default(autoincrement())
  user_id    Int
  tariff_id  Int
  isChecked  PaymentStatus @default(PENDING)
  orderedAt  DateTime  @default(now())
  checkedAt  DateTime?
  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tariff   Tariff  @relation(fields: [tariff_id], references: [id], onDelete: Cascade)
  comment   String?

  @@map("orders")
}
model OrdersProduct {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id  Int
  isChecked  PaymentStatus @default(PENDING)
  // product_jd Int
  comment     String?
  contactNumber    String?
  contactLink       String?
  orderedAt  DateTime  @default(now())
  checkedAt  DateTime?

  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  main_products   Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  

  @@map("orderProduct")
}

model Payments {
  id              Int          @id @default(autoincrement())
  user_id         Int
  status          PaymentStatus @default(PENDING)
  photo_url       String?      @unique
  to_send_date    DateTime     @default(now())
  to_checked_date DateTime?
  card            String?
  coin            Float?
  reason          String?
  currency        String?
  

  user     Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Card {
  id                 Int     @id @default(autoincrement())
  card_seria_number  String  @unique
  countries          String
  card_type          String?

  @@map("cards")
}

model Product {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  created_user  Int
  count         Float?
  photo_url     ProductImage[]
  rating       Float
  rewiev       Float
  coin      Float

  creator       Users                @relation("CreatedMainProducts", fields: [created_user], references: [id], onDelete: Cascade)
  translations  ProductTranslation[] @relation("ProductTranslations")
  // prices        ProductPrice[]       @relation("ProductPrices")
  orders        OrdersProduct[]
  @@map("main_products")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  CANCELLED
  SUCCESS
  SENDING
  SCRINSHOTUPLOAD
  CANCELLEDADMIN
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  photo_url  String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}







// model TariffPrice {
//   id        Int     @id @default(autoincrement())
//   tariff_id Int
//   currency  String
//   value     Float

//   tariff    Tariff  @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

//   @@unique([tariff_id, currency])
// }

model Coin{
  id Int @id @default(autoincrement())
  currency String
  count Float
  type String?
  @@unique([currency])
}
enum CoinType{
  CRYPTO
  MONEY
}

model UserTarif{
  id Int @id @default(autoincrement())
  user_id Int
  tariff_id Int
  start_time DateTime @default(now())
  status  Boolean @default(true)
  end_time DateTime?
  lastBonusDate DateTime?
  user Users @relation(fields: [user_id],references: [id],onDelete: Cascade)
  tariff Tariff @relation(fields: [tariff_id],references: [id],onDelete: Cascade)
}
model SpinValue{
  id Int @id @default(autoincrement())
  name String?
  color String?
  precent Int?
}
model BonusDetailes{
  id Int @id @default(autoincrement())
}

model ReferalLevel{
  id Int @id @default(autoincrement())
  level Int @unique
  prize String
  prizeName String?
  count Float
  maxCount Int 
}

model RecentUser{
  id Int @id @default(autoincrement())
  email String  @unique
  coin Float
}

model StatistikaWeb{
  id Int @id @default(autoincrement())
  userCount Int
  allCoin Float
}
model TakeOff{
  id Int @id @default(autoincrement())
  userId Int
  cardNumber String
  how_much   Int
  status TakeOffStatus @default(PENDING)
  requestDate  DateTime @default(now())
  checkedDate DateTime?
  commend  String?
  fullName String?
  currency String?


    user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}
model IncomeHistory{
  id Int @id @default(autoincrement())
  userId Int
  date DateTime @default(now())
  coin Float
  tariff_id Int

  tariff    Tariff @relation(fields: [tariff_id],references: [id],onDelete: Cascade)
  user      Users @relation(fields: [userId],references: [id],onDelete: Cascade)
}
model BonusReferalHistory{
  id Int @id @default(autoincrement())
  userId Int
  referalUserId Int
  date DateTime @default(now())
  coin Float

  user Users @relation("userId",fields: [userId],references: [id],onDelete: Cascade)
  referalUser Users @relation("referalUserId",fields: [referalUserId],references: [id],onDelete: Cascade)
}
enum TakeOffStatus {
  PENDING
  CANCELLED
  SUCCESS
  SENDING
  SCRINSHOTUPLOAD
  CANCELLEDADMIN
}

model MinTakeOff{
  id Int @id @default(autoincrement())
  minValue Int
}

model CardNumber{
  id Int @id @default(autoincrement())
  seriaNumber String
  currency String
  type String?
  date DateTime @default(now())
  
}

model Suport{
  id Int @id @default(autoincrement())
  name String
  link String
  date DateTime @default(now())
}
model About{
  id Int @id @default(autoincrement())
  aboutTranslation AboutTranslation[]
}


model AboutTranslation{
  id Int @id @default(autoincrement())
  aboutId Int
  language String
  heroTitle String
  heroDescription String
  howWorkSystem String
  withPlansTitle String
  withPlansDescription String
  referalTitle String
  referalDescription String
  levelTitle String
  levelDescription String
  USDTTitle String
  USDTDescription String
  aboutCompanyTitle String?
  aboutCompanyDescription String?
  aboutCompanyExpence String?

  about About @relation(fields: [aboutId],references: [id],onDelete: Cascade)
}